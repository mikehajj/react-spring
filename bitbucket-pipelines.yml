# This is a sample build configuration for PHP.
# Check our guides at https://confluence.atlassian.com/x/e8YWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

pipelines:
  pull-requests:
    feature/*:
      - step:
          # auto merge pull request to develop branch
          name: Merge to Develop
          script:
            - git fetch
            - git checkout -b develop || git checkout develop
            - git merge $BITBUCKET_BRANCH
            - git push -v --tags origin develop:develop
            - git push origin --delete $BITBUCKET_BRANCH
  branches:
    develop:
      - step:
          image: ubuntu-latest
          name: Run Unit Tests
          script:
            - ./mvnw clean verify
            - mvn test
      - step:
          image: ubuntu-latest
          name: Run Integration Tests
          script:
            - mvn test -Pintegration-testing
      - step:
          image: ubuntu-latest
          name: Run Performance Tests
          script:
            - java -jar target/spring-pipeline-demo.jar > /dev/null &
              # Wait for the spring boot application to boot
            - sleep 20
            - mvn -q jmeter:jmeter
            - mvn jmeter:results
  tags:
    '*':
      - parallel:
        - step:
            size: 2x
            name: Building Backend
            script:
              # build a new docker image for the spring application and push it to remote docker registry
              - apt-get update && apt-get install -y unzip git
              - mv k8s/BE/Dockerfile .
              - docker build -t $DOCKER_HUB_USER/$DOCKER_HUB_REPO-frontend:v$BITBUCKET_TAG .
              - docker push $DOCKER_HUB_USER/$DOCKER_HUB_REPO-frontend:v$BITBUCKET_TAG
            services:
              - docker
        - step:
            size: 2x
            name: Building Frontend
            script:
              # build a new docker image for the react application and push it to remote docker registry
              - mv k8s/FE/Dockerfile .
              - echo $REACT_APP_ENV_VARS > .env
              - docker build -t $DOCKER_HUB_USER/$DOCKER_HUB_REPO-backoffice:v$BITBUCKET_TAG .
              - docker push $DOCKER_HUB_USER/$DOCKER_HUB_REPO-backoffice:v$BITBUCKET_TAG
            services:
              - docker
      - parallel:
        - step:
            name: Generating K8s Recipes for Backend
            deployment: backend-recipes
            image: node:14.4.0
            script:
              # trigger custom nodejs script that builds the k8s deployment recipes from templates and env variables
              # for the backend spring application
              - npm install json2yaml
              - node ./k8s/kube/kube.js
              - ls -la
              - mv deployment.yml backend-deployment.yml
              - mv external-service.yml backend-service.yml
            artifacts:
              - backend-service.yml
              - backend-deployment.yml
        - step:
            name: Generating K8s Recipes for Frontend
            deployment: frontend-recipes
            image: node:14.4.0
            script:
              # trigger custom nodejs script that builds the k8s deployment recipes from templates and env variables
              # for the frontend react application
              - npm install json2yaml
              - node ./k8s/kube/kube.js
              - ls -la
              - mv deployment.yml frontend-deployment.yml
              - mv external-service.yml frontend-service.yml
            artifacts:
              - frontend-service.yml
              - frontend-deployment.yml
        - step:
            image: node:14.4.0
            name: Prepare terraform scripts
            script:
              # trigger custom nodejs script that builds terraform recipes and k8s rbac configuration files
              - node ./tf/run.js $LINODE_API_TOKEN $KUBENS
              - cd tf && cp tf/create-rbac.yaml ../create-rbac.yaml
              - cd tf && cp tf/terraform.tfvars ../terraform.tfvars
            artifacts:
              - create-rbac.yaml
              - terraform.tfvars
      - step:
          image: hashicorp/terraform:full
          name: Provision k8s on Terraform
          script:
            # use terraform to provision a new k8s cluster on linode using the recipe created in previous step
            - cp terraform.tfvars tf/terraform.tfvars
            - cd tf && ./provision.sh
          artifacts:
            - kubeconfig.yml
            - terraform.tfstate
      - step:
          image: atlassian/pipelines-kubectl
          name: Verify k8s cluster & create Namespace to use later on & rbac configuration
          script:
            # once k8s cluster is created check that it is ready and create a new Namespace
            # then setup the RBAC configuration for the backend and for the frontend using service accounts and roles
            - kubectl --kubeconfig=kubeconfig.yml get nodes
            - kubectl --kubeconfig=kubeconfig.yml create ns $KUBENS
            - kubectl --kubeconfig=kubeconfig.yml get ns
            - kubectl --kubeconfig=kubeconfig.yml apply -f create-rbac.yaml -n $KUBENS
            - kubectl --kubeconfig=kubeconfig.yml get serviceaccounts -n $KUBENS
      - parallel:
        - step:
            deployment: backend-deployment
            name: Deploying Backend
            image: atlassian/pipelines-kubectl
            trigger: manual
            script:
              # deploy the backend spring app as replicated deployment with an exposed service on k8s
              # this step requires a manual trigger
              - echo "Creating new Deployment in namespace $KUBENS"
              - kubectl --kubeconfig=kubeconfig.yml apply -f ./backend-deployment.yml -n $KUBENS
              - echo "Attaching Service to new Deployment in namespace $KUBENS"
              - kubectl --kubeconfig=kubeconfig.yml apply -f ./backend-service.yml -n $KUBENS
        - step:
            deployment: frontend-deployment
            name: Deploying Frontend
            image: atlassian/pipelines-kubectl
            trigger: manual
            script:
              # deploy the frontend react app as replicated deployment with an exposed service on k8s
              # this step requires a manual trigger
              - echo "Creating new Deployment in namespace $KUBENS"
              - kubectl --kubeconfig=kubeconfig.yml apply -f ./frontend-deployment.yml -n $KUBENS
              - echo "Attaching Service to new Deployment in namespace $KUBENS"
              - kubectl --kubeconfig=kubeconfig.yml apply -f ./frontend-service.yml -n $KUBENS
      - step:
          image: hashicorp/terraform:full
          name: Destroy the k8s cluster using Terraform
          trigger: manual
          script:
            # final step that requires manual trigger to clean up the k8s cluster using terraform
            - cd tf && ./destroy.sh